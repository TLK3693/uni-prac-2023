1. npx create-react-app my-app --template typescript
2. create index.js + lib + middlewaer
3. Структура: client - слиентаская сторона,  
            server - back, models - схема в базе данных, 
            servise - сервисы, 
            controllers - routes -> controllers(контроллеры),
            routes - навигация
4. MODELS: userSchema, tokenSchema
5. Переходы / Routes
6. Под каждый адрес нужно сделать отдельную функцию/логику. 
    Для того чтобы контроллер не был "жирным" всю логику мы будем выносить в сервисы: 
    1)Сервис для работы с  пользоваетлями(создание, удаление, поиск и тд.),
    2)Сервис для работы с  почтой(из него мы будем отправлять сообщение пользоваетлю с активацией), 
    3)Сервис для работы с токеном

    -6.1 Сервис по регистрации пользователя:
    (Уровень бизнес-логики)
    Если пользовател сущ. в БД, то выкидываем ошибку, если нет то хешируем пароль, создаем ссылку для переадрисации(для почты).
    Создаем модель пользоваетля и кидаем туда данные пользоваетля,
    Создаем UserDto(DATA-TRANSFER-OBJECT  | payload),
    Создаем пару токенов(access&refrech) и сохраняем в бд,
    возращаем пару токенов и payload

    6.2 Сервис для токенов:
    Генерация пары токенов. У accessToken = 50m, у refrechToken = 50d -> возращаем токены.
    Сохранение токенов. Находим для начала в БД по userId(email, т.к.  он unique), если есть то перезаписываем refrechToken на новый, 
    Если нет то создаем tokenModel и создаем токены(Он хранит userDto.id,tokens и refrechToken)
    И возращаем токен

    6.3 Сервис для mail: 
    nodemailer lib
7. Middlewear для обработки ошибок/ Универскальный класс связанный с апи erros -> middlewaer которая обрадатывает ошибки
8. Валидация
9. Логирование
10. Logout
11. Get All users -> Middlewear for login account(only)

!NEXT() -> ВЫЗЫВАЕТ ПО ЦЕПОКИ MIDDLEWAER

---
CLIENT

1. LIBrs
2. Структура: store - взаимодествией с глоабльным хранилищем, http - axios(ассинзроные запросы к серверу),  servise - запросы на сервер и components
3. INTERCEPTOR - функция которая перехватывает запросы и ответсы от узлов. 
4. servise(auth and user)
5.